name: Build Realtek driver for WSL kernel

on:
  workflow_dispatch:
    inputs:
      # Option A (preferred): paste the exact WSL kernel tag from MS releases
      wsl_kernel_tag:
        description: "Exact WSL kernel tag (e.g., linux-msft-wsl-5.15.153.1 or linux-msft-wsl-6.6.36.1)"
        required: false
      # Option B: paste your uname -r from WSL; we derive the tag prefix
      kernel_release:
        description: "uname -r from WSL (e.g., 5.15.153.1-microsoft-standard-WSL2)"
        required: false
      # Which driver repo to build (defaults to rtl8188eu for your dongle)
      driver_repo:
        description: "Git repo URL of the driver (e.g., https://github.com/lwfinger/rtl8188eu)"
        required: false
        default: "https://github.com/lwfinger/rtl8188eu"
      # Just for artifact naming
      module_name:
        description: "Module name label (e.g., rtl8188eu)"
        required: true
        default: "rtl8188eu"

permissions:
  contents: read  # checkout & downloads need only read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Resolve WSL kernel tag
        id: tag
        shell: bash
        run: |
          if [[ -n "${{ github.event.inputs.wsl_kernel_tag }}" ]]; then
            TAG="${{ github.event.inputs.wsl_kernel_tag }}"
          elif [[ -n "${{ github.event.inputs.kernel_release }}" ]]; then
            base="${{ github.event.inputs.kernel_release }}"
            base="${base%%-*}"                               # keep '6.6.36.1' from '6.6.36.1-microsoft-standard-WSL2'
            TAG="linux-msft-wsl-${base}"                     # -> linux-msft-wsl-6.6.36.1
          else
            echo "Provide either wsl_kernel_tag or kernel_release." >&2
            exit 1
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc bison flex libssl-dev libelf-dev dwarves wget tar xz-utils git

      - name: Fetch matching WSL kernel sources
        run: |
          wget -q https://github.com/microsoft/WSL2-Linux-Kernel/archive/refs/tags/${{ steps.tag.outputs.tag }}.tar.gz -O wsl-kernel.tar.gz
          tar -xf wsl-kernel.tar.gz
          echo "KDIR=$(echo WSL2-Linux-Kernel-*)" >> $GITHUB_ENV

      - name: Prepare kernel headers
        run: |
          cd "$KDIR"
          make olddefconfig
          make modules_prepare

      - name: Fetch driver source
        run: |
          git clone "${{ github.event.inputs.driver_repo }}" driver
          ls -la driver

      - name: Build driver (try Kbuild M=... first, then fallback to KSRC=)
        shell: bash
        run: |
          set -e
          # Try standard out-of-tree build via Kbuild
          if make -C "$KDIR" M="$GITHUB_WORKSPACE/driver" modules; then
            echo "Built via Kbuild M=driver"
          else
            echo "Kbuild M=driver failed; trying repo's own Makefile with KSRC ..."
            make -C driver KSRC="$GITHUB_WORKSPACE/$KDIR"
          fi

      - name: Collect .ko artifacts
        run: |
          mkdir -p out
          find driver -name "*.ko" -print -exec cp {} out/ \;
          # Add kernel tag to filenames for clarity
          for f in out/*.ko; do
            mv "$f" "${f%.ko}-${{ steps.tag.outputs.tag }}.ko"
          done
          ls -la out

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "${{ github.event.inputs.module_name }}-${{ steps.tag.outputs.tag }}"
          path: out/*.ko
